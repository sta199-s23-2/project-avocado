---
title: "Working Class Representative Performance"
subtitle: "Which factors positively contribute to votes in their favor"
format: html
editor: visual
execute:
  echo: true
---

# **Introduction and Data**

The data set came from a journal published at Political Research Quarterly (2023). The authors were Eric Hansen, who is the assistant professor of political science at Loyola University Chicago and Sarah A. Treul, an Associate Professor of political science at UNC.

The authors collected, recorded, and analyzed novel data describing the occupational background of all candidates who competed in the U.S. House primaries between 2008 and 2016.

The dataset was used to give us an idea of how well candidates perform in U.S. House primary elections. In total, there are 7869 observations and 24 variables. Each observation represents a candidate who competed in the U.S. Hour primaries between 2008 and 2016. Each row of observation included a variety of factors related to election results, such as vote share, fundraising, incumbency status, education level, ideology, number of opponents, and political affiliation. Not all variables are useful in terms of predicting the candidate's performance as some of them are only numerical descriptions of vote share.

This research question is important for the following reasons. Given that the working class is less represented among high-level elected government officials, we would like to encourage research dedicated to this issue in order to identify factors that contribute to this phenomenon. Research in this area has focused on the barriers hindering working-class representatives. As a result, we do not know much about what factors allow working-class elected officials to overcome these barriers to election and thus, what factors influence their positive performance. We have decided to focus our research on working-class officials who have been elected to office as a case study. Results from our research would provide valuable insight to future working-class candidates. Ultimately, we hope this project can provide insight to future working class candidates providing more guidance to their campaign strategies and fundraising efforts. As a result, we hope this could contribute to more equality and equity in the government.

-- Hansen, Eric R.; Treul, Sarah A., 2023, "Replication Data for: Primary Barriers to Working Class Representation", https://doi.org/10.7910/DVN/YGT1KX, Harvard Dataverse, V1; Treul_Hansen_Codebook.pdf \[fileName\] Dataset: Hansen, Eric R.; Treul, Sarah A., 2023, "Replication Data for: Primary Barriers to Working Class Representation", https://doi.org/10.7910/DVN/YGT1KX, Harvard Dataverse, V1, UNF:6:LlOCRMLIvjECWBDwtT+Xdw== \[fileUNF\]

# **Methodology**

***Variables Selection:***

1.  Dependent variable: **candpct**, which represents the candidate's vote share in the primary election.

2.  Independent variables: We select the variables that potentially measure factors related to the candidate's vote share. These selected 14 independent variables include:

-   state_abbrev (the state the candidate is from)

-   candnumber (count of opponents in the candidate's primary election)

-   cand_party (the party of the candidate)

-   quality_cand (0=candidate is nonquality nonincumbent, 1=candidate is quality nonincumbent, 2=candidate is incumbent)

-   qualnumber (count of quality opponents)

-   openseat (whether the incumbent is running for reelection)

-   partyDonors1 (count of donations candidate received from donors to their party's national campaign funds)

-   college (percentage of the congressional district's residents who hold four-year college degrees)

-   dist_income (median income of the congressional district)

-   total_primary (total dollars contributed toward a candidate's campaign funds and outside spending, unit: millions of dollars)

-   third (whether candidate runs as a third party or independent)

-   gop (whether the candidate is Republican)

-   ideo_extreme (absolute value of Bonica's CFscore measure of candidate ideology)

-   former_worker (whether the candidate used to be a worker but is no longer now)

***Analysis Procedure:***

1.  First, we filter the dataset and keep only candidates with working-class background (worker == 1) and have won the election (winwin == 1).

2.  Second, we use the forward model selection method to compare and choose the variables that best predict the dependent variable. Specifically, we first try to fit each variable in a linear regression model with a single independent variable and find out which fits the best (the one with the lowest AIC). Then, we try to add each variable into the existing best model, and find out the best. We repeat this process by trying to add more variables and compare the AIC until we find out the best model. Based on the results, we conclude the most prominent factors related to the vote share.

3.  Using the factors selected, we run an additive and an interactive multiple linear regression model, and compare the results of the two models. Based on the results, we conclude and explain how the factors help contribute to a better performance of working-class representatives in the elections that they won.

# **Results**

```{r}
#| label: load-pkgs
#| message: false

library(tidyverse)
library(tidymodels)
library(MASS)
```

```{r}
#| label: load-data-2
candidate <- read.table("data/Treul_Hansen_Replication_Data.tab", 
                        sep = "\t", header = TRUE)
write.csv(candidate, file = "data/candidate.csv", col.names = TRUE)

glimpse(candidate)
```

```{r}
#| label: filter-candidate 

candidate_won <- candidate |>
  filter(winwin == 1, worker == 1) #337 observations

candidate_won_new <- candidate_won[,-c(2, 4, 5, 6, 9, 10, 22, 23)]
  
candidate_final <- candidate_won_new |>
  drop_na()
```

```{r}
#| label: forward-elimination-step1

linear_reg()|> #lowest AIC
  set_engine("lm") |>
  fit(candpct ~ cand_party, data = candidate_won) |>
  glance() |>
  pull(AIC) 

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ total_primary, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ quality_cand, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ state_abbrev, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ openseat, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ qualnumber, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ PartyDonors1, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ college, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ dist_income, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ third, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ gop, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ ideo_extreme, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ former_worker, data = candidate_won) |>
  glance() |>
  pull(AIC)
```

```{r}
#| label: forward-elimination-step2

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + state_abbrev, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + cand_party, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|> #lowest AIC
  set_engine("lm") |>
  fit(candpct ~ candnumber + quality_cand, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + qualnumber, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + openseat, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + PartyDonors1, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + college, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + dist_income, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + total_primary, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + third, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + gop, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + ideo_extreme, data = candidate_won) |>
  glance() |>
  pull(AIC)

linear_reg()|>
  set_engine("lm") |>
  fit(candpct ~ candnumber + former_worker, data = candidate_won) |>
  glance() |>
  pull(AIC)

```

```{r}
#| label: forward-elimination-step3

linear_reg()|> 
  set_engine("lm") |>
  fit(candpct ~ candnumber + quality_cand, data = candidate_won) |>
  glance() |>
  pull(AIC)

```

```{r}
#| label: drop-na

candidate_won_new <- candidate_won |> 
  drop_na()

```

```{r}
#| label: backward-selection 
#| eval: false

#we decided not to do it manually because it was too time-consuming 

lm1 <- lm(candpct ~ state_abbrev + candnumber + cand_party + quality_cand
          + qualnumber + openseat + PartyDonors1 + college + dist_income
          + total_primary + third + gop + former_worker, 
          data = candidate_final)
stepAIC(lm1,  direction = "backward") 

```

```{r}
#| label: forward-selection 
#| eval: false


lm2 <- lm(candpct ~ state_abbrev, data = candidate_final)

stepAIC(lm2,  scope = ~ state_abbrev + candnumber + cand_party + quality_cand
          + qualnumber + openseat + PartyDonors1 + college + dist_income
          + total_primary + third + gop + former_worker,
        direction = "forward")

```
